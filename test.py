I3N5c3RlbUltcG9ydAoKaW1wb3J0IG9zIAppbXBvcnQgc3lzCmltcG9ydCB0aW1lIApmcm9tIG9zIGltcG9ydCBzeXN0ZW0KZnJvbSB0aW1lIGltcG9ydCBzbGVlcAppbXBvcnQgcmVxdWVzdHMKCiNjbHJudW1iZXIKClIgPSAnXDAzM1sxOzMxbScKRyA9ICdcMDMzWzE7MzJtJwpZID0gJ1wwMzNbMTszM20nCkMgPSAnXDAzM1sxOzM2bScKVyA9ICdcMDMzWzE7MzdtJwoKIyMjIyMgTE9HTyAjIyMjIwpsb2dvID0gIiIiClwwMzNbMTs5Nm09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ClwwMzNbMTs5Nm0gICAgIApcMDMzWzE7OTZtICAgIF9fX18gICAgX18gIF9fICAgX19fXyAgICBfICAgXwpcMDMzWzE7OTJtICAgLyBfX198ICB8ICBcLyAgfCAvIF9fX3wgIHwgfCB8IHwKXDAzM1sxOzk2bSAgIFxfX18gXCAgfCB8XC98IHwgXF9fXyBcICB8IHxffCB8ClwwMzNbMTs5Mm0gICAgX19fKSB8IHwgfCAgfCB8ICBfX18pIHwgfCAgXyAgfApcMDMzWzE7OTZtICAgfF9fX18vICB8X3wgIHxffCB8X19fXy8gIHxffCB8X3wKIApcMDMzWzE7OTNtICAgICBGYWNlYm9vayA6IHd3dy5mYWNlYm9vay5jb20vc21zaC5tZQpcMDMzWzE7OTZtPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiIiIgoKI2ZvcnRleHRkZXNpZ24KCmRlZiBocChzKToKICAgIGZvciBjIGluIHMgKyAnXG4nOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoYykKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDguMCAvIDYwKQogICAgICAgIApkZWYgaChzKToKICAgIGZvciBjIGluIHMgKyAnXG4nOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoYykKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDguMCAvIDkpCiAgICAgICAgCiAgICAgICAgCiNtYWlucGFnZQoKZGVmIG15YWdlKCk6CiAgICB5b3VybmFtZSA9IGlucHV0KEMrIiBZb3VyIE5hbWU6IisgWSArICIgIikKICAgIAogICAgcHJpbnQoJycpCiAgICAKICAgIGhwKEcrICJIZWxsbywiK0MrKHlvdXJuYW1lKSsiISIpCiAgICAKICAgIHNsZWVwKDEpCiAgICAKICAgIGhwKEMgKyAoeW91cm5hbWUpKyBHICsiIFBsZWFzZSBFbnRlciBZb3VyIGFnZS4uLiAiKQogICAgCiAgICBwcmludCgnJykKICAgICAgICAKICAgIHlvdXJhZ2UgPSBpbnB1dChDKyAiIFlvdXIgQWdlOiIrIFkgKyIgIikKICAgICAgICAKICAgIHByaW50KCcnKQogICAgCiAgICBocChSICsgIllvdXIgYWdlIGlzIE11bHRpcGx5aW5nLi4uICIgKQogICAgCiAgICBwcmludChSICsgIlBsZWFzZSBXYWl0Li4uIikKICAgIAogICAgcHJpbnQoJycpCiAgICAKICAgIHNsZWVwKDEpCiAgICAKICAgIGgoVyArICIxLi4uMjUuLi41MC4uLjc1Li4uODUuLi45MC4uLjEwMCIpCiAgICAKICAgIHByaW50KCcnKQogICAgCiAgICBzbGVlcCgyKQogICAgCiAgICBocChHICsgIk11bHRpcGx5aW5nIHN1Y2Nlc3NmdWxseSBEb25lLi4uISIpCgogICAgc2xlZXAoMSkKICAgIAogICAgYWdlID0gaW50KHlvdXJhZ2UpCiAgICAKICAgIGlmKGFnZSA8PSAxMik6CiAgICAgICAgcHJpbnQoJycpCiAgICAgICAgaHAoQyArICh5b3VybmFtZSkrIEcgKyAiIFlvdSBhcmUga2lkISIpCiAgICAgICAgICAgIAogICAgZWxpZihhZ2UgPD0gMTgpOgogICAgICAgIHByaW50KCcnKQogICAgICAgIGhwKEMgKyAoeW91cm5hbWUpKyBHICsgIiBZb3UgYXJlIHRlZW5hZ2VyISIpCiAgICAgICAgICAgIAogICAgZWxpZihhZ2UgPj0gMTgpOgogICAgICAgIHByaW50KCcnKQogICAgICAgIGhwKEMgKyAoeW91cm5hbWUpKyBHICsiIFlvdSBhcmUgYWR1bHQhIikKICAgICAgICAKICAgIGVsc2U6CiAgICAgICAgaHAoUiArIlNvcnJ5IHN5c3RlbSBpcyBtYXliZSBkb3duISIpCiAgICAgICAgCiN0ZXh0CmRlZiB3cnR0KCk6CiAgICBwcmludCgnJykKICAgIGhwKEcrICIgICAgICAgICAgICAgICAgQWxsYWggSGFmZXogICAgICAgICAgIikKICAgIAogICAgCiNyaWdodE9yV29ybmcKCmRlZiByaWdodCgpOgogICAgcnNsdCA9IGlucHV0KEMgKyJBbSBJIHJpZ2h0Pyh5ZXMvbm8pOiAiKQogICAgCiAgICAKICAgIHJzbHQgPSByc2x0Lmxvd2VyKCkKCgogICAgaWYgJ3llcycgaW4gcnNsdDoKICAgICAgICBwcmludCgnJykKICAgICAgICB5ZXNzID0gcnNsdC5yZXBsYWNlKCd5ZXMnLCcnKQogICAgICAgIGhwKFkgKyAiIFdlbGNvbWUuIikKICAgICAgICBocChDICsgIiBUaGFuayB5b3Ugc28gbXVjaC5QcmF5IGZvciBtZS5BbmQgYSBnYW1lIG1hZGUgd2l0aCB5b3VyIGFnZSB3aWxsIHRlbGwgbWUgaG93IHlvdSBmZWx0PyIpCiAgICAgICAgaHAoQyArICIgR29vZCBsdWNrIHRvIHlvdS5Hb2QgYmxlc3MgeW91LiIpCiAgICAgICAgd3J0dCgpCiAgICAgICAgCiAgICAgICAgCiAgICBlbGlmICJubyIgaW4gcnNsdDoKICAgICAgICBubyA9IHJzbHQucmVwbGFjZSgnbm8nLCcnKQogICAgICAgIHByaW50KCcnKQogICAgICAgIGhwKFkgKyAiIFN5c3RlbSBtYXliZSBkb3duLlRyeSB0byBBZ2Fpbi5UaGFuayB5b3UiKQogICAgICAgIAogICAgZWxzZToKICAgICAgICBwcmludCgnJykKICAgICAgICBocChSICsgIkludmFsaWQgdHlwZS5Xcml0ZSB5ZXMgb3Igbm8gLlRyeSBBZ2Fpbi5UaGFuayB5b3UuQ29udHJhY3QgbWUuLi4iKQogICAgICAgIG9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly9mYWNlYm9vay5jb20vc21zaC5tZScpCiAgICAgICAgcmlnaHQoKQogICAgICAgCiAgICAgICAKI2FsbEZ1bnRpb24KZGVmIHBvbm8oKToKICAgIHByaW50KCcnKQogICAgbXlhZ2UoKQogICAgcHJpbnQoJycpCiAgICByaWdodCgpCiAgICBwcmludCgnJykKICAgICAgIAogICAgICAgCiNwbGF5YWdhaW4gCiAgICAgICAgCmRlZiBwYWcoKToKICAgIHByaW50KCcnKQogICAgcGxheWFnYWluID0gaW5wdXQoQyArICJEbyB5b3Ugd2FudCBwbGF5IEFnYWluPyh5ZXMvbm8pOiIpCiAgICBwbGF5YWdhaW4gPSBwbGF5YWdhaW4ubG93ZXIoKQogICAgCiAgICBpZiAneWVzJyBpbiBwbGF5YWdhaW46CiAgICAgICAgcHJpbnQoJycpCiAgICAgICAgeWUgPSBwbGF5YWdhaW4ucmVwbGFjZSgneWVzJywnJykKICAgICAgICBzbGVlcCgxKQogICAgICAgIHN5c3RlbSgiY2xlYXIiKQogICAgICAgIHByaW50KCJQbGF5IEFnYWluLi4uIikKICAgICAgICBwb25vKCkKICAgICAgICBwcmludCgnJykKICAgICAgICBwYWcoKQogICAgICAgIAogICAgZWxpZiAnbm8nIGluIHBsYXlhZ2FpbjoKICAgICAgICAKICAgICAgICBwcmludCgnJykKICAgICAgICBuYSA9IHBsYXlhZ2Fpbi5yZXBsYWNlKCdubycsJycpCiAgICAgICAgaHAoWSArICIgUGxlYXNlLFR5cGUgQ1RSTCArIEMgZm9yIGNhbmNsZS5UaGFuayB5b3UuIikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoJycpCiAgICAgICAgaHAoUiArICIgSW52YWxpZCB0eXBlLldyaXRlIHllcyBvciBubyAuVHJ5IEFnYWluLlRoYW5rIHlvdS5Db250cmFjdCBtZS4uLiIpCiAgICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL2ZhY2Vib29rLmNvbS9zbXNoLm1lJykKICAgICAgICBwcmludCgnJykKICAgICAgICBwYWcoKQoKCgogICAgICAgIAoKc3lzdGVtKCJjbGVhciIpCgpwcmludCgnJykKaHAoJycpCnByaW50KEcgKyAiIEhlbGxvIUkgYW0gUyBNIFNoYWtpYiBIYXNhbiAiKQpocChsb2dvKQoKcHJpbnQoJycpCgpocChSICsgJyBJZiB5b3Ugd2FudCB0byBkbyB0aGUgam9iLicpCmhwKEcgKyAnIEFuZCBpZiB5b3UgbG92ZSB5b3VyIGpvYi4nICkKaHAoUiArICcgVGhlbiBvbmUgZGF5IHlvdSB3aWxsIGJlIHN1Y2Nlc3NmdWwuJykKaHAoQyArICcgSW5zaGFsbGFoLicpCmhwKEcgKyAgJyAgICAgICAgICAgICAgICAgIC0tU01TSCcpCgpwcmludCgnJykKaCgnJykKaHAoWSArICIgR29pbmcgVG8gbmV4dCBwYWdlLi4uLi4uIikKCnNsZWVwKDIpCgoKc3lzdGVtKCJjbGVhciIpCgpwcmludCgnJykKCmhwKFIgKyAnVG9kYXkgSSB3YW50IHBsYXkgeW91ciBhZ2UhJykKCnByaW50KCcnKQoKaHAoWSArICJZZWFoIUFyZSB5b3UgcmVhZHk/ICIpCmhwKFcrJycpCgpocChHICsgIj09PT09PT09PT09PT09PiBMZXQncyBTdGFydCA8PT09PT09PT09PT09IikKCnByaW50KCcnKQoKaHAoRyArIlBsZWF
